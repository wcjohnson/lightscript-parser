import { TestRun, Testable, TestOptions } from './TestRunner'
import { allTests, TestFilter } from './TestFilter'
import path from 'path'
import fs from 'fs'
import { parse } from '../../lib'
import misMatch from './misMatch'

function mkdirSync(dirPath) {
  try {
    fs.mkdirSync(dirPath)
  } catch (err) {
    if (err.code !== 'EEXIST') throw err
  }
}

stringifyAst(ast) ->
  toJSON = RegExp.prototype.toJSON
  RegExp.prototype.toJSON = RegExp.prototype.toString
  jsonAst = JSON.stringify(ast, null, "  ")
  RegExp.prototype.toJSON = toJSON
  jsonAst

class ParserTestOptions extends TestOptions:
  inherits(other): void ->
    if not other: return
    for key k, val v in other:
      match k:
        | 'throws': null
        | else: this[k] = v

  assign(other): void ->
    if not other: return
    for key k, val v in other:
      match k:
        | 'includePlugins':
          this[k] = (this[k] or []).concat(v)
        | else:
          this[k] = v

class ParserTestable extends Testable:
  loadTest(): void ->
    this.loadTestData()
    this.enqueueTest()

  readTestOptions() ->
    optionsData = this.readLocalArtifact("options.json", false)
    options = if optionsData: JSON.parse(optionsData) else: {}
    // Allow test options to be overridden
    overrideData = this.readLocalArtifact("options.override.json", false)
    if overrideData:
      Object.assign(options, JSON.parse(overrideData))
    options

  loadTestData(): void ->
    if this.name and this.name[0] == '.':
      this.disabled = true
      return

    options = this.readTestOptions()
    if options: this.options.assign(options)
    //console.log("Test options:", this.title, this.options)

    this.actual = this.readLocalArtifact("input", true)
    this.expected = this.readLocalArtifact("output", ['.override.json', '.json'])

    // Use parent input if no child input.
    if (not this.actual) and (this.parent) and (this.parent.actual):
      if not this.expected: this.expected = this.parent.expected
      this.actual = this.parent.actual

  enqueueTest(): void ->
    if this.disabled:
      if typeof(it) != 'undefined':
        it.skip(this.title, => this.runTest())
      else:
        console.log("Skipped test:", this.title)
    elif this.actual:
      if typeof(it) != 'undefined':
        it(this.title, => this.runTest())
      else:
        console.log("Ran test:", this.title)
    else:
      // console.log("skipping (no input)", this.title)
      return

  throwAnnotatedError(err): void ->
    // Unnecessary because jest is good
    // err.message = this.title + ": " + err.message
    throw err

  runTest(): void ->
    let ast
    try {
      now ast = this.run.parse(this.actual, this.options)
    } catch(err) {
      if this.options.throws:
        if err.message == this.options.throws:
          return
        elif process.env.SAVE_THROWS:
          this.saveThrows(err)
          this.throwAnnotatedError(err)
        elif process.env.DUPLICATE_ON_FAILURE:
          this.saveErrorOverride(this.options.throws)
          this.throwAnnotatedError(err)
        elif process.env.OVERRIDE_ON_FAILURE:
          this.saveErrorOverride(err.message)
          this.throwAnnotatedError(err)
        else:
          err.message = `Expected error message: ${this.options.throws}. Got error message: ${err.message}`
          this.throwAnnotatedError(err)
      elif (not this.expected) and (process.env.SAVE_THROWS):
        this.saveThrows(err)
      elif this.expected and process.env.FIX_BY_BANNING_PLUGIN:
        this.fixErrorByBanningPlugin(this.expected, err.message, process.env.FIX_BY_BANNING_PLUGIN)
        return undefined // "successful" test

      this.throwAnnotatedError(err)
    }

    if this.options.throws:
      this.throwAnnotatedError(new Error(`Expected error message '${this.options.throws}' but no error was thrown.`))

    // Don't store comments in expected output
    if (ast.comments && !ast.comments.length) delete ast.comments

    if ((not this.expected) or (process.env.FORCE_SAVE)) and (not this.options.throws) and (process.env.SAVE_EXPECTED):
      this.saveExpected(ast, "output.json")
      return

    if this.options.throws:
      this.throwAnnotatedError(new Error(
        "Expected error message: " + this.options.throws + ". But parsing succeeded."
      ))
    else:
      if this.expected:
        parsedExpected = JSON.parse(this.expected)
        mis = misMatch(parsedExpected, ast)
        if mis:
          this.mismatchExpected(parsedExpected, ast, mis)
        else:
          return undefined // Test succeeded
      else:
        this.throwAnnotatedError(new Error("Empty expected output -- use SAVE_EXPECTED=1 to create expected output."))

  mismatchExpected(expected, received, mismatch) ->
    if (process.env.OVERRIDE_ON_FAILURE) or (process.env.SAVE_OVERRIDE):
      this.saveExpected(received, "output.override.json")
      return
    elif process.env.DUPLICATE_ON_FAILURE:
      this.saveExpected(expected, "output.override.json")
    elif process.env.UPDATE_EXPECTED:
      this.saveExpected(received, "output.json")
      return
    elif process.env.FIX_BY_BANNING_PLUGIN:
      this.fixByBanningPlugin(expected, received, process.env.FIX_BY_BANNING_PLUGIN)

    this.throwAnnotatedError(new Error("Mismatch against expected output: " + mismatch))

  saveExpected(ast, filename): void ->
    this.saveLocalArtifact(filename, stringifyAst(ast))

  fixByBanningPlugin(expected, received, whichPlugin) ->
    subtestPath = path.join(this.path, "lightscriptFix")
    mkdirSync(subtestPath)
    fs.writeFileSync(path.join(subtestPath, "options.json"), JSON.stringify({
      banPlugins: [whichPlugin]
    }))
    fs.writeFileSync(path.join(subtestPath, "output.json"), stringifyAst(expected))
    this.saveLocalArtifact("output.override.json", stringifyAst(received))

  fixErrorByBanningPlugin(expectedString, throws, whichPlugin) ->
    subtestPath = path.join(this.path, "lightscriptFix")
    mkdirSync(subtestPath)
    fs.writeFileSync(path.join(subtestPath, "options.json"), JSON.stringify({
      banPlugins: [whichPlugin]
    }))
    fs.writeFileSync(path.join(subtestPath, "output.json"), expectedString)
    this.saveLocalArtifact("options.override.json", JSON.stringify({throws}))

  saveErrorOverride(throws) ->
    this.saveLocalArtifact("options.override.json", JSON.stringify({throws}))


  saveThrows(err): void ->
    const opts = this.readTestOptions() or {}
    opts.throws = err.message
    this.saveLocalArtifact("options.json", JSON.stringify(opts, null, "  "))

run = new TestRun()
run.parse = parse
run.getTestableConstructor() -> ParserTestable
run.getOptionsConstructor() -> ParserTestOptions
run.extensions = ['.js', '.lsc', '.lsx']

filter = new TestFilter()
if process.env.ONLY:
  filter.only(process.env.ONLY)

rootTestable = new ParserTestable(run, null, filter)
rootTestable.setTestPath(path.join(__dirname, '../fixtures'))
rootTestable.readTestDirectory()
