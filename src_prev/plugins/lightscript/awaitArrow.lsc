// Parse `<-`
import { Plugin } from '../core/plugin'
import { TokenType } from "../../tokenizer/register"

isValidSafeAwaitPattern(lhs) ->
  lhs.type == "ArrayPattern"
  and lhs.elements?.length == 2

awaitArrow = new Plugin({
  name: 'awaitArrow'
  dependencies: ['awaitArrow_tokenizer']

  mixin(ParserBase, opts) -> {
    return class extends ParserBase {
      constructor(options, input) -> {
        super(options, input)
        this.tt_awaitArrow = new TokenType("<-", {
          startsExpr: true
          beforeExpr: true
          isAssign: true
        })
      }

      awaitArrow_checkAwaitLegal(awaitPos): void -> {
        if this.state.inFunction:
          if not this.state.inAsync:
            this.unexpected(awaitPos, "Illegal await in a non-async function.")
        elif not this.options.allowAwaitOutsideFunction:
          this.unexpected(awaitPos, "Await is illegal outside functions.")
      }

      awaitArrow_parseSafeAwait(node) -> {
        // Await arrow has already been eaten; error appears at arrow pos
        this.awaitArrow_checkAwaitLegal(this.state.lastTokStart)
        node.argument = this.parseMaybeUnary()
        this.finishNode(node, "LscSafeAwaitExpression")
      }

      awaitArrow_parseAwaitArrow(left, forbidDestructuring) -> {
        node = this.startNode()
        arrowType = this.state.value
        arrowPos = this.state.pos
        this.next()
        if arrowType == "<!-":
          if(
            forbidDestructuring and
            left and
            ((left.type == "ObjectPattern") or (left.type == "ArrayPattern")) and
            (not left~isValidSafeAwaitPattern())
          ):
            this.unexpected(arrowPos - 3, "Safe await can only be destructured into a pattern of the form [result, error].")
          this.awaitArrow_parseSafeAwait(node)
        else:
          awaitNode = this.parseAwait(node)
          this.addExtra(awaitNode, "arrow", true)
          awaitNode
      }

      awaitArrow_parseAwaitArrowAssign(left) -> {
        this.awaitArrow_parseAwaitArrow(left, true)
      }

      awaitArrow_parseAwaitArrowAtom() -> {
        this.awaitArrow_parseAwaitArrow(null)
      }

      ////////////////
      // OVERRIDES
      ////////////////

      // Read <- as a type of strict assignment
      matchStrictAssignment(): boolean -> {
        this.match(this.tt_awaitArrow) or super.matchStrictAssignment()
      }

      // Parse await arrows as var initializers
      parseVarInit(decl, isFor, kind): void -> {
        if (not isFor) and (this.match(this.tt_awaitArrow)):
          decl.init = this.awaitArrow_parseAwaitArrowAssign(decl.id)
        else:
          super.parseVarInit(decl, isFor, kind)
      }

      // Parse await arrows in assignments
      parseMaybeAssign_parseAssign(left, startPos, startLoc, noIn, refShorthandDefaultPos, state) -> {
        if this.match(this.tt_awaitArrow):
          state.isAwaitArrow = true
          // ASI, await arrow on its own line
          if this.isLineBreak(): return left

        super.parseMaybeAssign_parseAssign(left, startPos, startLoc, noIn, refShorthandDefaultPos, state)
      }

      parseMaybeAssign_parseRight(node, startPos, startLoc, noIn, state): void -> {
        if state.isAwaitArrow:
          node.right = this.awaitArrow_parseAwaitArrowAssign(node.left)
        else:
          super.parseMaybeAssign_parseRight(node, startPos, startLoc, noIn, state)
      }

      // Parse await arrows as expressions
      parseExprAtom(refShorthandDefaultPos) -> {
        if this.state.type == this.tt_awaitArrow:
          this.awaitArrow_parseAwaitArrowAtom()
        else:
          super.parseExprAtom(refShorthandDefaultPos)
      }

      // Give a better error message when await appears outside of async
      parseAwait(node) -> {
        this.awaitArrow_checkAwaitLegal(node.start)
        super.parseAwait(node)
      }
    } // class
  } // mixin
})

export default awaitArrow
