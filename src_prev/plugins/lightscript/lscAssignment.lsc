// Parsing for implicit-const declarations
// `now` keyword/assignments
// Export auto-const

import { Plugin } from '../core/plugin'
import { types as tt, TokenType, registerToken, registerKeywordToken } from "../../tokenizer/register"

IMPLICIT_CONST_NODE_TYPE = "TEMP_LscImplicitConst"

lscAssignment = new Plugin({
  name: 'lscAssignment'
  dependencies: ['significantWhitespace', 'transientState', 'versatileTypeAnnotations']

  load() ->
    registerKeywordToken("now", new TokenType("now", {
      keyword: "now"
      beforeExpr: true
    }))

  mixin(ParserBase, opts) -> {
    return class extends ParserBase:
      lscAssignment_maybeParseTypeAnnotation(isStatementStart, funcState) -> {
        // If there's a colon, and we could conceivably be parsing a statement,
        // and there's no linebreak after the colon (as in a whiteblock)
        // it might be a type annotation...
        if(
          this.match(tt.colon) and
          this.vta_hasTypePlugin() and
          isStatementStart and
          (not this.isFollowedByLineBreak())
        ) {
          state = this.state.clone()
          // Grab the annotation
          typeAnnotation = this.vta_maybeParseTypeAnnotation()
          if typeAnnotation instanceof Error:
            this.state = state
            return

          // We must have some kind of assignment operator here. Otherwise
          // it's a bogus parse.
          if not this.matchStrictAssignment():
            this.state = state
          else:
            funcState.typeAnnotation = typeAnnotation
        } // if
      } // maybeParseTypeAnnotation

      lscAssignment_isConvertibleToImplicitConst(node, state): boolean ->
        // LHS must be a "Pattern"-type node but not a "MemberExpression":
        // "Identifier", "ObjectPattern", "ArrayPattern"
        (
          node.left.type == "Identifier" or
          node.left.type == "ObjectPattern" or
          node.left.type == "ArrayPattern"
        ) and state.isStrictAssignment

      lscAssignment_rewriteAsDeclarator(node) ->
        node.type = "VariableDeclarator"
        node.id = node.left
        node.init = node.right
        delete node.left
        delete node.operator
        delete node.right
        node

      lscAssignment_tryParseImplicitConstDeclaration() ->
        let state, gotEq
        try:
          now state = this.state.clone()
          node = this.startNode()
          decl = this.startNode()
          this.parseVarHead(decl)
          this.expect(tt.eq)
          now gotEq = true
          decl.init = this.parseMaybeAssign()
          node.declarations = [this.finishNode(decl, "VariableDeclarator")]
          node.kind = "const"
          this.addExtra(node, "implicit", true)
          this.semicolon()
          return this.finishNode(node, "VariableDeclaration")
        catch err:
          this.state = state // rewind
          if gotEq: err._gotEq = true
          return err

      ///////
      // OVERRIDES
      ///////

      isKeyword(word: string): boolean ->
        if word == 'now': true else: super.isKeyword(word)

      // Mark the beginning of a statement so we can check later.
      // XXX: consider factoring this out to a separate base plugin
      // or reconsidering how it works altogether
      parseStatementContent(declaration, topLevel) ->
        this.setTokenMarker("beginsStatement")
        super.parseStatementContent(declaration, topLevel)

      parseMaybeAssign_parseLeft(startPos, startLoc, noIn, refShorthandDefaultPos, refNeedsArrowPos, state) ->
        // Determine if we are at the start of a statement
        isStatementStart = (this.getTokenMarker() == "beginsStatement")
        state.isStatementStart = isStatementStart
        // Determine if the subsequent assignment will be a "now"-qualifier
        state.isNowAssign = this.eat(tt._now)

        // Get LHS
        left = super.parseMaybeAssign_parseLeft(startPos, startLoc, noIn, refShorthandDefaultPos, refNeedsArrowPos, state)

        // ...then get possible type annotation
        this.lscAssignment_maybeParseTypeAnnotation(isStatementStart, state)

        left

      parseMaybeAssign_parseAssign(left, startPos, startLoc, noIn, refShorthandDefaultPos, state) ->
        state.isStrictAssignment = this.matchStrictAssignment()
        super.parseMaybeAssign_parseAssign(left, startPos, startLoc, noIn, refShorthandDefaultPos, state)

      parseMaybeAssign_finishAssign(node, startPos, startLoc, noIn, state) ->
        { isStatementStart, isNowAssign, typeAnnotation } = state

        if not isNowAssign:
          if isStatementStart and this.lscAssignment_isConvertibleToImplicitConst(node, state):
            // Valid implicit-const declaration.
            // Apply type annotation
            if typeAnnotation:
              this.vta_applySubsequentTypeAnnotation(node.left, typeAnnotation)
            // Create a temporary node type that will be converted back
            // into a VariableDeclaration
            this.finishNode(node, IMPLICIT_CONST_NODE_TYPE)
          else:
            node.isNowAssign = false
            this.finishNode(node, "AssignmentExpression")
        else:
          // Valid normal assignment
          node.isNowAssign = true
          this.finishNode(node, "AssignmentExpression")

      parseMaybeAssign_parseNonAssign(node, startPos, startLoc, noIn, state) ->
        { isStatementStart, isNowAssign } = state

        if isNowAssign:
          if (node.type == "UpdateExpression") or noIn:
            node.isNowAssign = true
          else:
            this.raise(startPos, "`now` can only be used with assignments and updates.", { code: "LSC_NOW_NONASSIGN" })

        node

      // When we convert a CallExpr back to an arrow function, drop the "isNowAssign"
      // flag from the node
      setArrowFunctionParameters(node, params): void ->
        for elem param in params:
          if param.type == "AssignmentExpression":
            delete param.isNowAssign
        super.setArrowFunctionParameters(node, params)

      // Convert implicit-const nodes to VarDecls as we exit the statement parser
      parseExpressionStatement(node, expr) ->
        if expr.type == IMPLICIT_CONST_NODE_TYPE:
          decl = this.lscAssignment_rewriteAsDeclarator(expr)
          node.kind = "const"
          this.addExtra(node, "implicit", true)
          node.declarations = [decl]
          this.semicolon()
          this.finishNode(node, "VariableDeclaration")
        else:
          super.parseExpressionStatement(node, expr)

      // Intercept `export name = value`
      parseExport(node) ->
        // export x = 3, export { x, y } = a, export [ a, b ] = c
        let decl
        if this.match(tt.name) or this.match(tt.bracketL) or this.match(tt.braceL):
          now decl = this.lscAssignment_tryParseImplicitConstDeclaration()
          if not (decl instanceof Error):
            node.specifiers = []
            node.source = null
            node.declaration = decl
            this.checkExport(node, true)
            return this.finishNode(node, "ExportNamedDeclaration")

        try:
          return super.parseExport(node)
        catch err:
          if decl and decl._gotEq:
            throw decl
          else:
            throw err
  } // mixin
})

export default lscAssignment
