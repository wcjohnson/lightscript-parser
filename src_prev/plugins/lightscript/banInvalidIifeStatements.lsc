// Ban statements that are invalid in an IIFE when a state flag is set.
//
// These are `break`, `continue`, `return` statements which semantically
// can't cross an IIFE boundary.
import { Plugin } from '../core/plugin'
import { types as tt, TokenType } from "../../tokenizer/types"

banInvalidIifeStatements = new Plugin({
  name: 'banInvalidIifeStatements'
  mixin(ParserBase, opts) -> {
    return class extends ParserBase:
      constructor(options, input) ->
        super(options, input)
        this.state.banInvalidIifeStatements = false
        this.state.banInvalidIifeAwait = false

      banInvalidIifeStatements(banAwait) -> {
        restoreVector = {
          banInvalidIifeStatements: this.state.banInvalidIifeStatements
          banInvalidIifeAwait: this.state.banInvalidIifeAwait
          labels: this.state.labels
        }
        this.state.banInvalidIifeStatements = true
        if banAwait: this.state.banInvalidIifeAwait = true
        this.state.labels = []
        restoreVector
      }

      unbanInvalidIifeStatements(restoreVector) -> {
        Object.assign(this.state, restoreVector)
      }

      ///////////////
      // OVERRIDES
      ///////////////

      parseStatementContent(declaration, topLevel) -> {
        if this.state.banInvalidIifeStatements:
          switch (this.state.type) {
            case tt._break:
            case tt._continue:
            case tt._return:
              this.unexpected(null, "Illegal `" + this.state.type.label + "` keyword in expression.")
              break;
          }

        if this.state.banInvalidIifeAwait and this.state.type == tt._await:
          this.unexpected(null, "Illegal `await` keyword in expression.")

        super.parseStatementContent(declaration, topLevel)
      }

      parseMethod(node, isGenerator, isAsync, isConstructor, type) -> {
        oldBanInvalidIifeStatements = this.state.banInvalidIifeStatements
        this.state.banInvalidIifeStatements = false
        result = super.parseMethod(node, isGenerator, isAsync, isConstructor, type)
        this.state.banInvalidIifeStatements = oldBanInvalidIifeStatements
        result
      }

      parseArrowExpression(node, params, isAsync) -> {
        oldBanInvalidIifeStatements = this.state.banInvalidIifeStatements
        this.state.banInvalidIifeStatements = false
        result = super.parseArrowExpression(node, params, isAsync)
        this.state.banInvalidIifeStatements = oldBanInvalidIifeStatements
        result
      }

      parseFunctionBody(node, allowExpression): void -> {
        oldBanInvalidIifeStatements = this.state.banInvalidIifeStatements
        this.state.banInvalidIifeStatements = false
        super.parseFunctionBody(node, allowExpression)
        this.state.banInvalidIifeStatements = oldBanInvalidIifeStatements
      }

      parseFunction(node, isStatement, allowExpressionBody, isAsync, optionalId) -> {
        oldBanInvalidIifeStatements = this.state.banInvalidIifeStatements
        this.state.banInvalidIifeStatements = false
        result = super.parseFunction(node, isStatement, allowExpressionBody, isAsync, optionalId)
        this.state.banInvalidIifeStatements = oldBanInvalidIifeStatements
        result
      }
  } // mixin
})

export default banInvalidIifeStatements
