// Parsing for whiteblock `if`
// `elif` keyword

import { Plugin } from '../core/plugin'
import { types as tt, TokenType, registerToken, registerKeywordToken } from "../../tokenizer/register"

lscIf = new Plugin({
  name: 'lscIf'
  dependencies: ['lscCoreSyntax', 'banInvalidIifeStatements']

  load() ->
    registerKeywordToken("elif", new TokenType("elif", {
      keyword: "elif"
      beforeExpr: true
    }))

  mixin(ParserBase, opts) -> {
    clazz = class extends ParserBase:
      isKeyword(word: string): boolean ->
        if word == 'elif': true else: super.isKeyword(word)

      matchesWhiteBlockASIToken(): boolean ->
        this.match(tt._elif) or super.matchesWhiteBlockASIToken()

      lscParseIf(node, isExpression, requireColon) -> {
        const indentLevel = this.state.indentLevel;
        this.next();
        node.test = this.parseParenExpression();

        const isColon = requireColon
          ? this.check(tt.colon)
          : this.match(tt.colon);

        // colon not allowed, parent `if` didn't use one.
        if (isColon && requireColon === false) this.expect(tt.braceL);

        if (isColon) this.pushWhiteBlockState("if", indentLevel);

        if (isExpression) {
          // We need to disallow any kind of statement that might cross
          // an IIFE boundary, in case this gets turned into an IIFE.
          //
          // This means: return, break, continue
          //
          // Note that setting `state.inFunction` to `false` is BAD -- that fools
          // many other parts of the parser.
          restoreVector = this.banInvalidIifeStatements(true)

          if (this.match(tt.braceL)) {
            node.consequent = this.parseBlock(false);
          } else if (!isColon) {
            node.consequent = this.parseMaybeAssign();
          } else {
            node.consequent = this.parseWhiteBlock(true);
          }

          this.unbanInvalidIifeStatements(restoreVector)
        } else {
          this.state.nextBraceIsBlock = true;
          node.consequent = this.parseStatement(false);
        }

        node.alternate = this.lscParseIfAlternate(node, isExpression, isColon, indentLevel);

        if (isColon) this.popWhiteBlockState();

        return this.finishNode(node, isExpression ? "LscIfExpression" : "IfStatement");
      } // parseIf

      lscParseIfAlternate(node, isExpression, ifIsWhiteBlock, ifIndentLevel) -> {
        if (!this.match(tt._elif) && !this.match(tt._else)) return null;

        // If the indent level here doesn't match with the current whiteblock `if`, or
        // it matches with a whiteblock `if` higher on the stack, then this alternate
        // clause does not match the current `if` -- so unwind the recursive descent.
        const alternateIndentLevel = this.state.indentLevel;
        if (
          (alternateIndentLevel !== ifIndentLevel) &&
          (ifIsWhiteBlock || this.matchWhiteBlockState("if", alternateIndentLevel))
        ) {
          return null;
        }

        if (this.match(tt._elif)) {
          return this.lscParseIf(this.startNode(), isExpression, ifIsWhiteBlock);
        }

        if (this.eat(tt._else)) {
          if (this.match(tt._if)) {
            if (this.isLineBreak()) {
              this.unexpected(this.state.lastTokEnd, "Illegal newline.");
            }
            return this.lscParseIf(this.startNode(), isExpression, ifIsWhiteBlock);
          }

          if (ifIsWhiteBlock) {
            return this.parseWhiteBlock(isExpression);
          } else if (this.match(tt.colon)) {
            this.expect(tt.braceL);
          }

          if (isExpression) {
            if (this.match(tt.braceL)) {
              return this.parseBlock(false);
            } else {
              return this.parseMaybeAssign();
            }
          }

          this.state.nextBraceIsBlock = true;
          return this.parseStatement(false);
        }

        return null;
      } // parseIfAlternate

      // Hook `if` parsing
      parseIfStatement(node) ->
        this.lscParseIf(node, false)

      // Catch dangling `else`/`elif` and give a better error message.
      parseExprAtom(refShorthandDefaultPos) ->
        if (this.state.type == tt._else) or (this.state.type == tt._elif):
          this.unexpected(null, "Unmatched `else` (must match indentation of the line with `if`).")
        else:
          super.parseExprAtom(refShorthandDefaultPos)


    return clazz
  } // mixin
})

export default lscIf
