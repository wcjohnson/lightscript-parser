import { Plugin } from '../core/plugin'
import { types as tt, TokenType, registerToken } from "../../tokenizer/register"
import * as charCodes from "charcodes"

isOptionalNode(node) ->
  match node.type:
    | "OptionalMemberExpression": true
    | "OptionalCallExpression": true
    | "LscOptionalTildeCallExpression": true
    | else: false

tildeCall = new Plugin({
  name: 'tildeCall'
  dependencies: ['versatileTypeAnnotations']

  mixin(ParserBase, opts) -> {
    return class extends ParserBase {
      constructor(options, input) -> {
        super(options, input)
        this.tt_tildeCall = new TokenType("~>")
      }

      tildeCall_parseCallee(node) -> {
        // Allow `this`, `()` or ordinary identifiers only
        callee = if this.match(tt._this) or this.match(tt.parenL):
          this.parseExprAtom()
        else:
          this.parseIdentifier() // parseIdentifierOrPlaceholder() for match
        // Don't allow further calls as subscripts in the callee
        node.callee = this.parseSubscripts(callee, this.state.start, this.state.startLoc, true)
        // Check for type args
        if(
          this.vta_hasTypePlugin() and
          this.isAdjacent() and
          this.vta_matchCallExpressionTypeArguments()
        ):
          this.vta_parseCallExpressionTypeArguments(node)
      }

      // Parse `a~b(...)` or `a~>b(...)`
      tildeCall_parse(node, left, startPos, startLoc, state, leftIsOptional) -> {
        // Consume `~` token
        this.next()
        node.left = left

        this.tildeCall_parseCallee(node)

        // Allow safe-callee tilde calls `a~b?(c)`
        calleeIsOptional = (
          this.hasPlugin("optionalChaining") &&
          this.isAdjacent() &&
          this.eat(tt.question)
        )

        // Invocation must be adjacent to the callee
        if not this.isAdjacent():
          this.unexpected(null, "Illegal whitespace between call and argument list.")

        // Parse the call
        if not this.parseCallish(node):
          state.stop = true // no more subscripting

        // Determine optionality
        if calleeIsOptional: node.calleeOptional = true
        if leftIsOptional: node.leftOptional = true
        if (
          calleeIsOptional or leftIsOptional or
          left~isOptionalNode() or
          node.callee~isOptionalNode()
        ):
          this.finishNode(node, "LscOptionalTildeCallExpression")
        else:
          this.finishNode(node, "LscTildeCallExpression")
      } // tildeCall_parse

      /////////////////////
      // OVERRIDES
      /////////////////////

      // Modify tokenizer to intercept `~`
      getTokenFromCode(code) -> {
        if code == charCodes.tilde:
          if this.input.charCodeAt(this.state.pos + 1) == charCodes.greaterThan:
            this.state.pos += 2
            return this.finishToken(this.tt_tildeCall, "~>")

          if this.hasPlugin("disableBitwiseOperators"):
            ++this.state.pos
            return this.finishToken(this.tt_tildeCall, "~")

        super.getTokenFromCode(code)
      }

      // Hook subscript parsing chain to catch `~` token
      parseSubscript(base, startPos, startLoc, noCalls, state) -> {
        if (not noCalls) and this.match(this.tt_tildeCall):
          node = this.startNodeAt(startPos, startLoc)
          return this.tildeCall_parse(node, base, startPos, startLoc, state)

        super.parseSubscript(base, startPos, startLoc, noCalls, state)
      }
    } // class
  } // mixin
})

export default tildeCall
