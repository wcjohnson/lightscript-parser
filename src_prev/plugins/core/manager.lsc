// Plugin manager
import { pluginForName, parserClassCache } from './registry'

// TODO: lodash.sortBy
stableSort(arr, comparator) ->
  len = arr.length
  entries = Array(len)
  for (let index = 0; index < len; index++) entries[index] = [index, arr[index]]
  newComparator = ((a, b) -> Number(this(a[1], b[1])) or (a[0] - b[0])).bind(comparator)
  entries.sort(newComparator)
  for (let index = 0; index < len; index++) arr[index] = entries[index][1]
  arr

export class PluginList:
  constructor() ->
    this.requestedPlugins = []
    this.namedPluginOptions = {}

  _addPlugin(name, opts): void -> {
    this.requestedPlugins.push(pluginForName(name))
    // Merge options in the event of dupe
    curOpts = this.namedPluginOptions[name]
    if curOpts:
      Object.assign(curOpts, opts)
    elif opts:
      this.namedPluginOptions[name] = Object.assign({}, opts)
  }

  addPlugin(plugin, opts): void ->
    if opts:
      this._addPlugin(plugin, opts)
    elif Array.isArray(plugin):
      this._addPlugin(plugin[0], plugin[1])
    else:
      this._addPlugin(plugin)

  addPlugins(plugins): void ->
    for elem p in plugins: this.addPlugin(p)

  // Ban all named plugins, including banning plugins that depend upon them.
  banPlugins(list): void ->
    bannedPlugins = [...for elem name in list: pluginForName(name).dependents()]
    this.requestedPlugins = this.requestedPlugins.filter(x -> bannedPlugins.indexOf(x) == -1)

  toBabelPluginList() ->
    [...for elem p in this.requestedPlugins:
      pluginName = p.getName()
      if this.namedPluginOptions[pluginName]:
        [ [pluginName, this.namedPluginOptions[pluginName]] ]
      else:
        [pluginName]
    ]

export class PluginManager extends PluginList:
  constructor() ->
    super()
    this.actualPlugins = []

  resolveActualPlugins() ->
    loadOrderEntriesByName = {}
    // Duped load order: fully unwound dependencies for each plugin, concatenated in idealized load order
    dupedLoadOrder = [...for elem p in this.requestedPlugins: p.unwoundDependencies() ]

    // Deduped load order: only one entry for each plugin, when it first appears
    dedupedLoadOrder = [...for elem p in dupedLoadOrder:
      pluginName = p.getName()
      if not loadOrderEntriesByName[pluginName]:
        loadOrderEntriesByName[pluginName] = p
        [p]
    ]

    // Now sort by plugin load order priority
    stableSort(dedupedLoadOrder, (a, b) -> a.getLoadOrderPriority() - b.getLoadOrderPriority())

    this.actualPlugins = dedupedLoadOrder


  actualPluginNames() -> [...for elem p in this.actualPlugins: [p.getName()]]

  actualPluginBabelOpts() -> [...for elem p in this.actualPlugins:
    pluginName = p.getName()
    if this.namedPluginOptions[pluginName]:
      [ [pluginName, this.namedPluginOptions[pluginName]] ]
    else:
      [pluginName]
  ]

  hasActualPlugin(p): boolean ->
    if typeof(p) == 'string':
      this.actualPluginNames().indexOf(p) > -1
    else:
      this.actualPlugins.indexOf(p) > -1

  validate(): void ->
    for elem p in this.actualPlugins: p.validate(this, this.namedPluginOptions[p.getName()])

  load(): void ->
    for elem p in this.actualPlugins:
      if not p._wasLoaded:
        p.load(this.namedPluginOptions[p.getName()])
        p._wasLoaded = true

  getParserClass(Parser) ->
    mixinPlugins = this.actualPlugins.filter(p -> p.hasMixin())

    key = mixinPlugins.map(p -> p.getName()).join('/')
    let cls = parserClassCache[key]
    if not cls:
      now cls = Parser
      for elem plugin in mixinPlugins:
        now cls = plugin.mixin(cls, this.namedPluginOptions[plugin.getName()])
      parserClassCache[key] = cls

    //console.log("mixinPlugins", mixinPlugins, "mixedClass", cls)
    cls
